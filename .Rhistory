breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
ggplot(aes(carat, price), data=diamonds) +
geom_point(alpha = 0.03) +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
ggplot(aes(carat, price), data=diamonds) +
geom_point(alpha = 0.1) +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
ggplot(aes(carat, price), data=diamonds) +
geom_point(alpha = 0.05) +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
ggplot(aes(carat, price), data=diamonds) +
geom_point(alpha = 0.05, size=0.75) +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
ggplot(aes(carat, price), data=diamonds) +
geom_point(alpha = 0.05, size=0.75, position='jitter') +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
ggplot(aes(carat, price), data=diamonds) +
geom_point(alpha = 0.05, size=0.75, position='jitter',
aes(color=clarity)) +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
ggplot(aes(carat, price, color=clarity), data=diamonds) +
geom_point(alpha = 0.05, size=0.75, position='jitter') +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
library(RColorBrewer)
ggplot(aes(carat, price, color=clarity), data=diamonds) +
geom_point(alpha = 0.05, size=0.75, position='jitter') +
scale_color_brewer(type='div',
quide = guide_legend(title="Clarity", reverse = TRUE,
override.aes = list(alpha=1, size=2)))
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
library(RColorBrewer)
ggplot(aes(carat, price, color=clarity), data=diamonds) +
geom_point(alpha = 0.05, size=0.75, position='jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title="Clarity", reverse = TRUE,
override.aes = list(alpha=1, size=2)))
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
library(RColorBrewer)
ggplot(aes(carat, price, color=clarity), data=diamonds) +
geom_point(alpha = 0.05, size=0.75, position='jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title="Clarity", reverse = TRUE,
override.aes = list(alpha=1, size=2))) +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
ggplot(aes(carat, price, color=cut), data=diamonds) +
geom_point(alpha = 0.05, size=0.75, position='jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title="Cut", reverse = TRUE,
override.aes = list(alpha=1, size=2))) +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat")
ggplot(aes(carat, price, color=color), data=diamonds) +
geom_point(alpha = 0.05, size=0.75, position='jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title="Color", reverse = TRUE,
override.aes = list(alpha=1, size=2))) +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat and Color")
ggplot(aes(carat, price, color=color), data=diamonds) +
geom_point(alpha = 0.05, size=0.75, position='jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title="Color",
override.aes = list(alpha=1, size=2))) +
scale_x_continuous(trans=cuberoot_trans(), limits=c(0.2, 3),
breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits=c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) by Cube-Root of Carat and Color")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
# Chunk 1: set-options
options(width = 100)
# Chunk 2
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library('GGally')
library(reshape2)
library(gridExtra)
library(MASS)
library(psych)
library(scales)
require(grid)
# Chunk 3
setwd('/Users/toma/Documents/UdacityNanodegree/P4 WhiteWines')
wines <- read.csv('wineQualityWhites.csv')
# Chunk 4
dim(wines)
str(wines)
desc.output <- describe(wines[2:13], quant = c(0.25, 0.75), IQR = TRUE,
skew = FALSE )
desc.output
# Chunk 5
desc.output$outl.lbound <- desc.output$Q0.25 - 1.5*desc.output$IQR
desc.output$outl.rbound <- desc.output$Q0.75 + 1.5*desc.output$IQR
desc.output$outl.rbound.dist <- (desc.output$max - desc.output$Q0.75 +
1.5*desc.output$IQR) / desc.output$mean
desc.output$outl.lbound.dist <- (desc.output$min - (desc.output$Q0.25 -
1.5*desc.output$IQR) ) / desc.output$mean
desc.output[c("min", "max", "outl.lbound", "outl.rbound", "outl.rbound.dist",
"outl.lbound.dist")]
# Chunk 6
# Returns a table with distribution of factor variable v, it includes numbers
# and percentages
pretty.table <- function(v) {
n <- length(v)
num <- table(v)
perc <- percent(c(num/n))
dim(perc) <- dim(num)
dimnames(perc) <- dimnames(num)
return (t(cbind(num,perc)))
}
wines$quality.cls <- factor(wines$quality)
ggplot(aes(x=quality.cls), data=wines) + geom_bar(fill='darkblue',
aes(y=..count../sum(..count..)))
pretty.table(wines$quality.cls)
# Chunk 7
wines$quality.cls.agg <- wines$quality.cls
levels(wines$quality.cls.agg) <- c("1-4","1-4", "5", "6", "7", "8-10","8-10")
ggplot(aes(x=quality.cls.agg), data=wines) + geom_bar(fill='darkblue',
aes(y=..count../sum(..count..)))
pretty.table(wines$quality.cls.agg)
# Chunk 8
# Returns a grid with variable boxplot and histogram
show.distr <- function(variable, data, binwidth) {
p1 <- ggplot(data, aes_string(x=1, y=variable)) + geom_boxplot()
p2 <- ggplot(data, aes_string(x=variable)) + geom_histogram(fill='darkblue',
binwidth = binwidth)
return (
grid.arrange(p1,p2, ncol=2, widths=c(1,2) )
)
}
show.distr.stat <- function(desc, variable) {
return (
desc[c(variable),c("mean", "Q0.25", "Q0.75", "min", "max", "outl.lbound",
"outl.rbound", "outl.rbound.dist", "outl.lbound.dist")]
)
}
# Chunk 9
show.distr("fixed.acidity", wines, 0.05)
show.distr.stat(desc.output, "fixed.acidity")
# Chunk 10
show.distr("volatile.acidity", wines, 0.005)
show.distr.stat(desc.output, "volatile.acidity")
# Chunk 11
show.distr("citric.acid", wines, 0.005)
show.distr.stat(desc.output, "citric.acid")
# Chunk 12
show.distr("pH", wines, 0.005)
show.distr.stat(desc.output, "pH")
# Chunk 13
show.distr("alcohol", wines, 0.05)
show.distr.stat(desc.output, "alcohol")
# Chunk 14
show.distr("residual.sugar", wines, 0.1)
show.distr.stat(desc.output, "residual.sugar")
# Chunk 15
ggplot(aes(x=residual.sugar), data=wines) + geom_histogram(fill='darkblue') +
scale_x_continuous(trans="log10", breaks = c(1, 1.5, 3, 10, 20))
# Chunk 16
show.distr("free.sulfur.dioxide", wines, 1)
show.distr.stat(desc.output, "free.sulfur.dioxide")
# Chunk 17
show.distr("total.sulfur.dioxide", wines, 1)
show.distr.stat(desc.output, "total.sulfur.dioxide")
# Chunk 18
show.distr("chlorides", wines, 0.001)
show.distr.stat(desc.output, "chlorides")
# Chunk 19
show.distr("sulphates", wines, 0.01)
show.distr.stat(desc.output, "sulphates")
# Chunk 20
show.distr("density", wines, 0.0001)
show.distr.stat(desc.output, "density")
# Chunk 21
ggplot(aes(x=Var1, y=Var2), data= melt(cor(wines[2:12]))) +
geom_tile(aes(fill=value)) +
geom_text(aes(fill=value, label=round(value,1) )) +
scale_fill_gradient2(limits=c(-1, 1)) +
theme(axis.text.x=element_text(angle=-90, hjust=0))
# Chunk 22
wines$type <- ifelse(wines$residual.sugar < 3, c("dry"), c("sweet"))
# Chunk 23
ggplot(aes(y=pH, x=residual.sugar), data=wines) +
geom_point(alpha=0.5, fill="darkblue") +
scale_x_continuous(limits = c(0.6, 25), trans = "log10") +
scale_y_log10() +
stat_smooth(aes(color=type), method="lm")
# Chunk 24
lm.fit <- lm(pH ~ residual.sugar, data=subset(wines, residual.sugar < 23 &
type=="dry") )
cor(wines[wines$type=="dry", "pH"], wines[wines$type=="dry", "residual.sugar"] )
coef(lm.fit)
# Chunk 25
lm.fit <- lm(pH ~ residual.sugar, data=subset(wines, residual.sugar < 23 &
type=="sweet") )
cor(wines[wines$type=="sweet", "pH"], wines[wines$type=="sweet", "residual.sugar"] )
coef(lm.fit)
# Chunk 26
ggplot(aes(y=alcohol, x=residual.sugar), data=wines) +
geom_point(alpha=0.5, fill="darkblue") +
scale_x_continuous(limits = c(0.6, 25), trans = "log10") +
stat_smooth(aes(color=type), method="lm")
# Chunk 27
lm.fit <- lm(alcohol ~ residual.sugar, data=subset(wines, residual.sugar < 23 &
type=="dry") )
cor(wines[wines$type=="dry", "alcohol"], wines[wines$type=="dry", "residual.sugar"] )
coef(lm.fit)
# Chunk 28
lm.fit <- lm(alcohol ~ residual.sugar, data=subset(wines, residual.sugar < 23 &
type=="sweet") )
cor(wines[wines$type=="sweet", "alcohol"], wines[wines$type=="sweet", "residual.sugar"] )
coef(lm.fit)
# Chunk 29
ggplot(aes(y=volatile.acidity, x=free.sulfur.dioxide/total.sulfur.dioxide),
data=wines) +
geom_point(alpha=0.5, position = "jitter") +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method="lm")
# Chunk 30
lm.fit <- lm(volatile.acidity ~ I(free.sulfur.dioxide/total.sulfur.dioxide) ,
data=wines )
cor(wines$volatile.acidity, wines$free.sulfur.dioxide/wines$total.sulfur.dioxide )
coef(lm.fit)
# Chunk 31
ggplot(aes(x=alcohol, y=pH), data=wines) +
geom_point(alpha=0.4) +
stat_smooth(method="lm", formula = y ~ x + I(x^2) + I(x^3))
# Chunk 32
quality.cls.aggnum <- wines$quality
quality.cls.aggnum[wines$quality <= 4] <- 1
quality.cls.aggnum[wines$quality == 5] <- 2
quality.cls.aggnum[wines$quality == 6] <- 3
quality.cls.aggnum[wines$quality == 7] <- 4
quality.cls.aggnum[wines$quality >= 8] <- 5
# Chunk 33
ggplot(aes(y=alcohol, x=quality.cls.agg ), data=wines) +
geom_jitter(alpha = 0.3, size=1) +
geom_boxplot(alpha=0.6, color="red") +
geom_smooth(aes(quality.cls.aggnum,
alcohol),
method = "lm",
se = FALSE,size=1)
by(wines$alcohol, wines$quality.cls.agg, summary)
# Chunk 34
ggplot(aes(y=residual.sugar, x=quality.cls.agg ), data=wines) +
scale_y_continuous(limits = c(0,25)) +
geom_jitter(alpha = 0.3, size=1) +
geom_boxplot(alpha=0.6, color="red") +
geom_smooth(aes(quality.cls.aggnum,
residual.sugar),
method = "lm",
se = FALSE,size=1)
by(wines$residual.sugar, wines$quality.cls.agg, summary)
# Chunk 35
ggplot(aes(y=volatile.acidity, x=quality.cls.agg ), data=wines) +
geom_jitter(alpha = 0.3, size=1) +
geom_boxplot(alpha=0.6, color="red") +
geom_smooth(aes(quality.cls.aggnum,
volatile.acidity),
method = "lm",
se = FALSE,size=1)
by(wines$volatile.acidity, wines$quality.cls.agg, summary)
# Chunk 36
ggplot(aes(y=free.sulfur.dioxide, x=quality.cls.agg ), data=wines ) +
scale_y_continuous(limits = c(0,100)) +
geom_jitter(alpha = 0.3, size=1) +
geom_boxplot(alpha=0.6, color="red") +
geom_smooth(aes(quality.cls.aggnum,
free.sulfur.dioxide),
method = "lm",
se = FALSE,size=1)
by(wines$free.sulfur.dioxide, wines$quality.cls.agg, summary)
# Chunk 37
p1 <- ggplot(aes(y=chlorides, x=quality.cls.agg), data=wines) +
geom_boxplot() +
scale_y_continuous(limits=c(0,0.08))
p2 <- ggplot(aes(y=pH, x=quality.cls.agg), data=wines) +
geom_boxplot() +
scale_y_continuous(limits = c(2.7, 3.6))
p3 <- ggplot(aes(y=density, x=quality.cls.agg), data=wines) +
geom_boxplot() +
scale_y_continuous(limits=c(0.985,1))
p4 <- ggplot(aes(y=citric.acid, x=quality.cls.agg), data=wines) +
geom_boxplot() +
scale_y_continuous(limits = c(0,1))
grid.arrange(p1,p2,p3,p4, ncol=2)
# Chunk 38
ggplot(aes(x=pH, y=quality), data=wines) +
stat_summary(geom="line", fun.y = "mean") +
stat_smooth()
# Chunk 39
ggplot(aes(x=alcohol, y=volatile.acidity, color=quality.cls.agg), data=wines) +
geom_point(alpha=0.5, position="jitter") +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type="div",
guide=guide_legend(title="Quality Score",
override.aes = list(size=3)))
# Chunk 40
ggplot(aes(x=alcohol, y=free.sulfur.dioxide/total.sulfur.dioxide,
color=quality.cls.agg), data=wines) +
geom_point(alpha=0.5, position="jitter") +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type="div",
guide=guide_legend(title="Quality Score",
override.aes = list(size=3)))
# Chunk 41
ggplot(aes(x=free.sulfur.dioxide/total.sulfur.dioxide, y=volatile.acidity,
color=quality.cls.agg),
data=wines) +
geom_point(alpha=0.5, position="jitter") +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type="div",
guide=guide_legend(title="Quality Score",
override.aes = list(size=3)))
# Chunk 42
new_wines <- subset(wines, residual.sugar <= 22.5 & free.sulfur.dioxide <=80.5 &
chlorides <=0.07 & citric.acid <=0.57 &
volatile.acidity <=0.49)
# Chunk 43
stnd_wines <- as.data.frame(scale(new_wines[c(2:12)]) )
stnd_wines$quality <- new_wines$quality
stnd_wines$quality.cls.agg <- new_wines$quality.cls.agg
lm.fit <- lm(quality ~ .-density, data=stnd_wines[1:12] )
summary(lm.fit)
# Chunk 44
glm.fit <- glm(quality.cls.agg ~ .-density,
data=stnd_wines[c(1:11,13)], family=binomial )
summary(glm.fit)
# Chunk 45
1 - glm.fit$deviance/glm.fit$null.deviance
# Chunk 46
polr.fit <- polr(quality.cls.agg ~ .-density, data=stnd_wines[c(1:11,13)])
summary(polr.fit)
# Chunk 47
polr.fit.null <- polr(quality.cls.agg ~ 1, data=stnd_wines[c(1:11,13)])
1 - polr.fit$deviance / polr.fit.null$deviance
# Chunk 48
ggplot(aes(y=alcohol, x=quality.cls.agg ), data=wines) +
geom_jitter(alpha = 0.3, size=1) +
geom_boxplot(alpha=0.6, color="red") +
geom_smooth(aes(quality.cls.aggnum,
alcohol),
method = "lm",
se = FALSE,size=1) +
ggtitle("Influence of Alcohol Amount on Wine Quality") +
ylab("Alcohol") +
xlab("Quality")
by(wines$alcohol, wines$quality.cls.agg, summary)
# Chunk 49
ggplot(aes(y=free.sulfur.dioxide, x=quality.cls.agg ), data=wines ) +
scale_y_continuous(limits = c(0,100)) +
geom_jitter(alpha = 0.3, size=1) +
geom_boxplot(alpha=0.6, color="red") +
geom_smooth(aes(quality.cls.aggnum,
free.sulfur.dioxide),
method = "lm",
se = FALSE,size=1) +
ggtitle("Influence of Free Sulfur Dioxide on Wine Quality") +
ylab("Free Sulfur Dioxide") +
xlab("Quality")
by(wines$free.sulfur.dioxide, wines$quality.cls.agg, summary)
# Chunk 50
ggplot(aes(x=alcohol, y=free.sulfur.dioxide/total.sulfur.dioxide,
color=quality.cls.agg), data=wines) +
geom_point(alpha=0.5, position="jitter") +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type="div",
guide=guide_legend(title="Quality Score",
override.aes = list(size=3))) +
ggtitle("Influence of Free Sulfur Dioxide\n Concentration and Alcohol
on Wine Quality") +
xlab("Alcohol") +
ylab("Free Sulfur Dioxide Concentration")
ggplot(aes(x=alcohol, y=volatile.acidity, color=quality.cls.agg), data=wines) +
geom_point(alpha=0.5, position="jitter") +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type="div",
guide=guide_legend(title="Quality Score",
override.aes = list(size=3)))
ggplot(aes(x=alcohol, y=volatile.acidity, color=quality.cls.agg), data=wines) +
geom_point(alpha=0.5, position="jitter") +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type="div",
guide=guide_legend(title="Quality Score",
override.aes = list(size=3))) +
theme_dark()
ggplot(aes(x=alcohol, y=free.sulfur.dioxide/total.sulfur.dioxide,
color=quality.cls.agg), data=wines) +
geom_point(alpha=0.5, position="jitter") +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type="div",
guide=guide_legend(title="Quality Score",
override.aes = list(size=3))) +
theme_dark() +
ggtitle("Influence of Free Sulfur Dioxide\n Concentration and Alcohol
on Wine Quality") +
xlab("Alcohol, %") +
ylab("Free Sulfur Dioxide Concentration, mg/dm^3")
dim(wines)
str(wines)
exclude <- c("X", "quality")
keep <- !(names(wine) %in% exclude)
desc.output <- describe(wines[,keep], quant = c(0.25, 0.75), IQR = TRUE,
skew = FALSE )
desc.output
keep
keep <- !(names(wine) %in% exclude)
keep
dim(wines)
str(wines)
exclude <- c("X", "quality")
keep <- !(names(wines) %in% exclude)
desc.output <- describe(wines[,keep], quant = c(0.25, 0.75), IQR = TRUE,
skew = FALSE )
desc.output
show.distr("chlorides", wines, 0.001)
show.distr.stat(desc.output, "chlorides")
ggplot(aes(x=chlorides), data=wines) + geom_histogram(fill='darkblue') +
scale_x_log10()
exclude <- c("X", "quality.cls", "quality.cls.agg")
keep <- !(names(wines) %in% exclude)
ggplot(aes(x=Var1, y=Var2), data= melt(cor(wines[,keep]))) +
geom_tile(aes(fill=value)) +
geom_text(aes(fill=value, label=round(value,1) )) +
scale_fill_gradient2(limits=c(-1, 1)) +
theme(axis.text.x=element_text(angle=-90, hjust=0))
exclude <- c("X", "quality.cls", "quality.cls.agg", "type")
keep <- !(names(wines) %in% exclude)
ggplot(aes(x=Var1, y=Var2), data= melt(cor(wines[,keep]))) +
geom_tile(aes(fill=value)) +
geom_text(aes(fill=value, label=round(value,1) )) +
scale_fill_gradient2(limits=c(-1, 1)) +
theme(axis.text.x=element_text(angle=-90, hjust=0))
cor(wines$alcohol, wines$quality)
cor(wines$residual.sugar, wines$quality)
cor(wines$volatile.acidity, wines$quality)
cor(wines$free.sulfur.dioxide, wines$quality)
ggplot(aes(y=free.sulfur.dioxide, x=quality.cls.agg ), data=wines ) +
scale_y_continuous(limits = c(0,100)) +
geom_jitter(alpha = 0.3, size=1) +
geom_boxplot(alpha=0.6, color="red") +
geom_smooth(aes(quality.cls.aggnum,
free.sulfur.dioxide),
method = "lm",
se = FALSE,size=1) +
ggtitle("Influence of Free Sulfur Dioxide on Wine Quality") +
ylab("Free Sulfur Dioxide") +
xlab("Quality")
by(wines$free.sulfur.dioxide, wines$quality.cls.agg, summary)
cor(wines$free.sulfur.dioxide, wines$quality)
cor(wines$alcohol, wines$quality)
cor(wines$residual.sugar, wines$quality)
cor(wines[wines$residual.sugar<25]$residual.sugar, wines[wines$residual.sugar<25]$quality)
cor(wines[wines$residual.sugar<25,]$residual.sugar, wines[wines$residual.sugar<25,]$quality)
cor(wines[wines$free.sulfur.dioxide<100,]$free.sulfur.dioxide,
wines[wines$free.sulfur.dioxide<100,]$quality)
